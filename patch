--- dist/src/tsd/ConnectionManager.java	2013-09-30 20:33:09.000000000 +0200
+++ mine/src/tsd/ConnectionManager.java	2014-01-16 18:30:06.772439001 +0100
@@ -26,6 +26,7 @@
 import org.jboss.netty.channel.ExceptionEvent;
 import org.jboss.netty.channel.SimpleChannelHandler;
 import org.jboss.netty.channel.group.DefaultChannelGroup;
+import org.jboss.netty.handler.codec.embedder.CodecEmbedderException;
 
 import net.opentsdb.stats.StatsCollector;
 
@@ -111,6 +112,12 @@
         return;
       }
     }
+    if (cause instanceof CodecEmbedderException) {
+			// payload was not compressed as it was announced to be
+      LOG.warn("Http codec error : " + cause.getMessage());
+			e.getChannel().close();
+      return;
+    }
     exceptions_unknown.incrementAndGet();
     LOG.error("Unexpected exception from downstream for " + chan, cause);
     e.getChannel().close();
--- dist/src/tsd/PipelineFactory.java	2013-09-30 20:33:10.000000000 +0200
+++ mine/src/tsd/PipelineFactory.java	2014-01-16 18:30:47.040438998 +0100
@@ -24,6 +24,8 @@
 import org.jboss.netty.handler.codec.http.HttpRequestDecoder;
 import org.jboss.netty.handler.codec.http.HttpResponseEncoder;
 
+import org.jboss.netty.handler.codec.http.HttpContentDecompressor;
+
 import net.opentsdb.core.TSDB;
 
 /**
@@ -102,6 +104,8 @@
           pipeline.addLast("aggregator", new HttpChunkAggregator(
               tsdb.getConfig().max_chunked_requests()));
         }
+				// allow client to encode the payload (ie : with gziped json)
+				pipeline.addLast("deflater", new HttpContentDecompressor());
         pipeline.addLast("encoder", new HttpResponseEncoder());
       } else {
         pipeline.addLast("framer", new LineBasedFrameDecoder(1024));
